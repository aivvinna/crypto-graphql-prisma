# import * from './generated/prisma.graphql'

  type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    user(where: UserWhereUniqueInput): User!
    usersConversed: [User!]!
    posts(where: PostWhereInput, query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    me: User!
    post(id: ID!): Post!
    userFollowingCount(id: ID!): UserConnection!
    userFollowersCount(id: ID!): UserConnection!
    userPostsCount(id: ID!): PostConnection!
    messages(otherUserId: ID!, first: Int, skip: Int, after: String, orderBy: MessageOrderByInput): [Message!]!
  }

  type Mutation {
    createUser(data: CreateUserInput): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createPost(data: CreatePostInput): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    upvotePost(id: ID!): Post!
    downvotePost(id: ID!): Post!
    removeUpvote(id: ID!): Post!
    removeDownvote(id: ID!): Post!
    followUser(id: ID!): User!
    unfollowUser(id: ID!): User!
    updateFavCryptos(cryptos: [String!]!): User!
    createMessage(data: CreateMessageInput): Message!
  }

  type Subscription {
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
    message: MessageSubscriptionPayload!
  }

  type AuthPayload {
    token: String!
    user: User!
  }

  input CreateUserInput {
    username: String!
    email: String!
    password: String!
  }

  input LoginUserInput {
    email: String!
    password: String!
  }

  input UpdateUserInput {
    username: String
    displayName: String
    email: String
    password: String
    location: String
    bio: String
    favCryptos: [String]
  }

  input CreatePostInput {
    content: String!
    category: PostCreatecategoryInput
    parentId: ID
  }

  input UpdatePostInput {
    content: String
    category: [String!]
  }

  input CreateMessageInput {
    content: String!
    receiverId: ID!
  }

  type User {
    id: ID!
    username: String!
    displayName: String!
    email: String
    password: String!
    posts: [Post!]!
    location: String!
    bio: String!
    favCryptos: [String!]!
    upvotedPosts: [Post!]!
    downvotedPosts: [Post!]!
    following: [User!]!
    followers: [User!]!
    messagesAuthored: [Message!]!
    messagesReceived: [Message!]!
    updatedAt: String!
    createdAt: String!
  }

  type Post {
    id: ID!
    content: String!
    category: [String!]!
    upvotes: [User!]!
    downvotes: [User!]!
    author: User!
    parent: Post
    posts: [Post!]!
    updatedAt: String!
    createdAt: String!
  }

  type Message {
    id: ID!
    content: String!
    author: User!
    receiver: User!
    updatedAt: String!
    createdAt: String!
  }

  enum MutationType {
    CREATED
    UPDATED
    DELETED
  }

  type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
  }

  type MessageSubscriptionPayload {
    mutation: MutationType!
    node: Message
  }
